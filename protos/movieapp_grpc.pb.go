// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: protos/movieapp.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComputeServiceClient is the client API for ComputeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeServiceClient interface {
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ComputeService_GetUsersClient, error)
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfo, error)
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
	GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ComputeService_GetMoviesClient, error)
	GetMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieInfo, error)
	CreateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type computeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeServiceClient(cc grpc.ClientConnInterface) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ComputeService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComputeService_ServiceDesc.Streams[0], "/test.ComputeService/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ComputeService_GetUsersClient interface {
	Recv() (*UserInfo, error)
	grpc.ClientStream
}

type computeServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *computeServiceGetUsersClient) Recv() (*UserInfo, error) {
	m := new(UserInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeServiceClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/test.ComputeService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/test.ComputeService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/test.ComputeService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/test.ComputeService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ComputeService_GetMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComputeService_ServiceDesc.Streams[1], "/test.ComputeService/GetMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceGetMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ComputeService_GetMoviesClient interface {
	Recv() (*MovieInfo, error)
	grpc.ClientStream
}

type computeServiceGetMoviesClient struct {
	grpc.ClientStream
}

func (x *computeServiceGetMoviesClient) Recv() (*MovieInfo, error) {
	m := new(MovieInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeServiceClient) GetMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieInfo, error) {
	out := new(MovieInfo)
	err := c.cc.Invoke(ctx, "/test.ComputeService/GetMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) CreateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/test.ComputeService/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) UpdateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/test.ComputeService/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) DeleteMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/test.ComputeService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeServiceServer is the server API for ComputeService service.
// All implementations must embed UnimplementedComputeServiceServer
// for forward compatibility
type ComputeServiceServer interface {
	GetUsers(*Empty, ComputeService_GetUsersServer) error
	GetUser(context.Context, *Id) (*UserInfo, error)
	CreateUser(context.Context, *UserInfo) (*Id, error)
	UpdateUser(context.Context, *UserInfo) (*Status, error)
	DeleteUser(context.Context, *Id) (*Status, error)
	GetMovies(*Empty, ComputeService_GetMoviesServer) error
	GetMovie(context.Context, *Id) (*MovieInfo, error)
	CreateMovie(context.Context, *MovieInfo) (*Id, error)
	UpdateMovie(context.Context, *MovieInfo) (*Status, error)
	DeleteMovie(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedComputeServiceServer()
}

// UnimplementedComputeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServiceServer struct {
}

func (UnimplementedComputeServiceServer) GetUsers(*Empty, ComputeService_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedComputeServiceServer) GetUser(context.Context, *Id) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedComputeServiceServer) CreateUser(context.Context, *UserInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedComputeServiceServer) UpdateUser(context.Context, *UserInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedComputeServiceServer) DeleteUser(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedComputeServiceServer) GetMovies(*Empty, ComputeService_GetMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedComputeServiceServer) GetMovie(context.Context, *Id) (*MovieInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedComputeServiceServer) CreateMovie(context.Context, *MovieInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedComputeServiceServer) UpdateMovie(context.Context, *MovieInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedComputeServiceServer) DeleteMovie(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedComputeServiceServer) mustEmbedUnimplementedComputeServiceServer() {}

// UnsafeComputeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServiceServer will
// result in compilation errors.
type UnsafeComputeServiceServer interface {
	mustEmbedUnimplementedComputeServiceServer()
}

func RegisterComputeServiceServer(s grpc.ServiceRegistrar, srv ComputeServiceServer) {
	s.RegisterService(&ComputeService_ServiceDesc, srv)
}

func _ComputeService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComputeServiceServer).GetUsers(m, &computeServiceGetUsersServer{stream})
}

type ComputeService_GetUsersServer interface {
	Send(*UserInfo) error
	grpc.ServerStream
}

type computeServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *computeServiceGetUsersServer) Send(m *UserInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ComputeService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).DeleteUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_GetMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComputeServiceServer).GetMovies(m, &computeServiceGetMoviesServer{stream})
}

type ComputeService_GetMoviesServer interface {
	Send(*MovieInfo) error
	grpc.ServerStream
}

type computeServiceGetMoviesServer struct {
	grpc.ServerStream
}

func (x *computeServiceGetMoviesServer) Send(m *MovieInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ComputeService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).GetMovie(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).CreateMovie(ctx, req.(*MovieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).UpdateMovie(ctx, req.(*MovieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ComputeService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).DeleteMovie(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputeService_ServiceDesc is the grpc.ServiceDesc for ComputeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _ComputeService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ComputeService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ComputeService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ComputeService_DeleteUser_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _ComputeService_GetMovie_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _ComputeService_CreateMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _ComputeService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _ComputeService_DeleteMovie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _ComputeService_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMovies",
			Handler:       _ComputeService_GetMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/movieapp.proto",
}
